($article
  ((tag Tutorial) (title . "毒瘤题选做"))
  ((h1 (id . "-boj19017-automorphism-https-www-acmicpc-net-problem-19017"))
   ((a (href . "https://www.acmicpc.net/problem/19017"))
    "BOJ19017 Automorphism"))
  (p "xza 课间上的题，似乎他自己都没写过。")
  ((h2 (id . "description")) "Description")
  (p "给你一棵树，初始状态下只有一个结点，以下两种操作：")
  (ul (li "在一个点的下方加入一个新点") (li "询问某个子树的自同构数量（有取模）"))
  ((h2 (id . "tutorial")) "Tutorial")
  (p "先考虑静态的问题。")
  (p "每个点的贡献是儿子子树同构数阶乘的积，子树同构除了树哈希也没什么其他做法。")
  (p "然后考虑动态加入一个点产生的影响。显然哈希值和对答案贡献的改变只存在于根到这个点的链上，暴力跳父亲可以获得 $O(n^2)$ 的时间复杂度。")
  (p
   "不难发现假如我们对整棵树重链剖分（此处的重儿子定义为严格重儿子，即大小严格大于其他兄弟的儿子，一个点可能没有重儿子，但时间复杂度同样正确），跳父亲时重链上的边一定不会对答案产生影响。然后我们需要维护重链上哈希值的变化。")
  (p
   "考虑常规的树哈希方式：用子树哈希值作为关键字将儿子排序，然后在 dfs 序上每个点对应的位置放上这个点的深度，然后做序列哈希。由于子树哈希值的变化会导致儿子顺序的改变，无法快速维护。考虑重链天然的性质，如果我们以子树大小为第一关键字，子树哈希值为第二关键字排序，那么重儿子的修改一定不会导致儿子顺序的变化，因此可以用 $O(1)$ 的信息标记一次修改，并且标记可以 $O(1)$ 合并。")
  (p
   "具体的，我们还要对每个结点维护一棵平衡树记录该结点所有轻儿子的哈希值。这样便可以在 $O(\\log n)$ 对一条轻边进行更新，同时可以 $O(\\log n)$ 查询更新前后同构子树的数量。")
  (p "重链剖分可以通过 LCT 动态维护，注意此时一条重链在 LCT 上对应一个联通块而非一棵 splay，否则无法进行 access")
  (p
   ((a (href . "https://www.acmicpc.net/source/32233708")) "AC 记录")
   "不过似乎要过了才能看，那就下面贴一下。")
  (details
   (summary "code")
   (pre
    ((code (class . "lang-cpp"))
     "#include \"/home/jack/code/creats/gpl.hpp\"\n"
     "#include <bits/stdc++.h>\n"
     "#include \"/home/jack/code/creats/Scanner.hpp\"\n"
     "#include \"/home/jack/code/creats/log.hpp\"\n"
     "// #include \"/home/jack/code/creats/range.hpp\"\n"
     "#include \"/home/jack/code/creats/util.hpp\"\n"
     "// #include \"/home/jack/code/creats/Vector.hpp\"\n"
     "// #include \"/home/jack/code/creats/STree.hpp\"\n"
     "// #include \"/home/jack/code/creats/Tree.hpp\"\n"
     "// #include \"/home/jack/code/creats/Graph.hpp\"\n"
     "#define INTM_FAST_64 long long\n"
     "#include \"/home/jack/code/creats/Intm.hpp\"\n"
     "// #include \"/home/jack/code/Math/Poly/main.h\"\n"
     "// #define MULTIPLE_TEST_CASES_WITH_T\n"
     "// #define MULTIPLE_TEST_CASES_WITHOUT_T\n"
     "#include \"/home/jack/code/creats/body.h\"\n"
     "// #define int long long\n"
     "/** My code begins here **/\n"
     "constexpr int MOD = 998244353;\n"
     "constexpr int N = 300005;\n"
     "using Int = Temps::Intm<MOD>;\n"
     "Int inv[N];\n"
     "uint64_t hash_cpow[N];\n"
     "template <class T, size_t N>\n"
     "struct pool_allocator\n"
     "{\n"
     " T pool[N], *pos = pool;\n"
     " T *allocate()\n"
     " {\n"
     "   return pos++;\n"
     " }\n"
     "};\n"
     "using hash_val_t = uint64_t;\n"
     "using hash_ord_t = std::pair<size_t, hash_val_t>;\n"
     "hash_ord_t hash_join(hash_ord_t a, hash_ord_t b)\n"
     "{\n"
     " return hash_ord_t(a.first + b.first,\n"
     "                   a.second + hash_cpow[a.first] * b.second);\n"
     "}\n"
     "hash_ord_t hash_det(hash_ord_t a, hash_ord_t b)\n"
     "{\n"
     " return hash_ord_t(b.first - a.first,\n"
     "                   b.second - a.second * hash_cpow[b.first - a.first]);\n"
     "}\n"
     "struct ftreap_node_t\n"
     "{\n"
     " constexpr static auto ord_cmp = std::greater<hash_ord_t>();\n"
     " static std::mt19937_64 rand_eng;\n"
     " static pool_allocator<ftreap_node_t, N * 16> allocator;\n"
     " hash_ord_t hash_val;\n"
     " hash_ord_t hash_sum;\n"
     " ftreap_node_t *l = nullptr, *r = nullptr;\n"
     " unsigned long weight = rand_eng();\n"
     " size_t size = 1;\n"
     " void push_up()\n"
     " {\n"
     "   size = 0;\n"
     "   hash_sum = {0,0};\n"
     "   if (l != nullptr)\n"
     "   {\n"
     "     size += l->size;\n"
     "     hash_sum = hash_join(hash_sum, l->hash_sum);\n"
     "   }\n"
     "   size += 1;\n"
     "   hash_sum = hash_join(hash_sum, hash_val);\n"
     "   if (r != nullptr)\n"
     "   {\n"
     "     size += r->size;\n"
     "     hash_sum = hash_join(hash_sum, r->hash_sum);\n"
     "   }\n"
     " }\n"
     "};\n"
     "std::mt19937_64 ftreap_node_t::rand_eng(18100820);\n"
     "pool_allocator<ftreap_node_t, N * 16> ftreap_node_t::allocator;\n"
     "extern ftreap_node_t *t[N];\n"
     "void ftreap_join(ftreap_node_t *&u, ftreap_node_t *l, ftreap_node_t *r)\n"
     "{\n"
     " if (l == nullptr) { u = r; return; }\n"
     " if (r == nullptr) { u = l; return; }\n"
     " if (l->weight > r->weight)\n"
     "   ftreap_join((u = l)->r, l->r, r);\n"
     " else\n"
     "   ftreap_join((u = r)->l, l, r->l);\n"
     " u->push_up();\n"
     "}\n"
     "void ftreap_split(ftreap_node_t *&l, ftreap_node_t *&r,\n"
     "                 ftreap_node_t *u, hash_ord_t thr)\n"
     "{\n"
     " if (u == nullptr)\n"
     " {\n"
     "   l = r = nullptr;\n"
     "   return;\n"
     " }\n"
     " if (ftreap_node_t::ord_cmp(u->hash_val, thr))\n"
     "   ftreap_split((l = u)->r, r, u->r, thr);\n"
     " else\n"
     "   ftreap_split(l, (r = u)->l, u->l, thr);\n"
     " u->push_up();\n"
     "}\n"
     "// return key count (before)\n"
     "size_t ftreap_erase_once(ftreap_node_t *&u, hash_ord_t val)\n"
     "{\n"
     " // see(\"erase\", &u - t, val);\n"
     " ftreap_node_t *a, *b, *c;\n"
     " ftreap_split(a, b, u, val);\n"
     " val.second--;\n"
     " ftreap_split(b, c, b, val);\n"
     " size_t res = b->size;\n"
     " ftreap_join(b, b->l, b->r);\n"
     " ftreap_join(a, a, b);\n"
     " ftreap_join(u, a, c);\n"
     " return res;\n"
     "}\n"
     "// return key count (after)\n"
     "size_t ftreap_insert(ftreap_node_t *&u, hash_ord_t val)\n"
     "{\n"
     " // see(\"insert\", &u - t, val);\n"
     " ftreap_node_t *a, *b, *c, *d;\n"
     " d = ftreap_node_t::allocator.allocate();\n"
     " d->hash_val = d->hash_sum = val;\n"
     " ftreap_split(a, b, u, val);\n"
     " val.second--;\n"
     " ftreap_split(b, c, b, val);\n"
     " ftreap_join(b, b, d);\n"
     " size_t res = b->size;\n"
     " ftreap_join(a, a, b);\n"
     " ftreap_join(u, a, c);\n"
     " return res;\n"
     "}\n"
     "hash_ord_t ftreap_first(ftreap_node_t *u)\n"
     "{\n"
     " while (u->l != nullptr)\n"
     "   u = u->l;\n"
     " return u->hash_val;\n"
     "}\n"
     "// lct maintains the hash tuple of one's wson\n"
     "struct lct_node_t\n"
     "{\n"
     " lct_node_t *f = nullptr, *s[2] = {nullptr, nullptr};\n"
     " hash_ord_t val = {0,0}, join = {0,0};\n"
     " Int ans = 1, ans_mul = 1;\n"
     " bool is_root() { return f == nullptr || (f->s[0] != this && f->s[1] != this); }\n"
     " bool get_son() { return f->s[1] == this; }\n"
     " void push_join(hash_ord_t det) { val = hash_join(det, val); join = hash_join(det, join); }\n"
     " void push_mul(Int det_mul) { ans *= det_mul; ans_mul *= det_mul; }\n"
     " void push_down() \n"
     " { \n"
     "   if (s[0] != nullptr) { s[0]->push_join(join); s[0]->push_mul(ans_mul); }\n"
     "   if (s[1] != nullptr) { s[1]->push_join(join); s[1]->push_mul(ans_mul); }\n"
     "   join = {0,0}; ans_mul = 1;\n"
     " }\n"
     " void push()\n"
     " {\n"
     "   if (!is_root()) f->push();\n"
     "   push_down();\n"
     " }\n"
     " void rotate()\n"
     " {\n"
     "   lct_node_t *uu = this, *ff = f, *aa = ff->f;\n"
     "   bool ss = uu->get_son();\n"
     "   if (!ff->is_root()) aa->s[ff->get_son()] = uu;\n"
     "   ff->f = uu; ff->s[ss] = uu->s[!ss];\n"
     "   uu->f = aa; uu->s[!ss] = ff;\n"
     "   if (ff->s[ss] != nullptr) ff->s[ss]->f = ff;\n"
     " }\n"
     " void splay()\n"
     " {\n"
     "   push();\n"
     "   while (!is_root())\n"
     "   {\n"
     "     if (f->is_root()) { rotate(); break; }\n"
     "     (is_root() == f->is_root() ? f : this)->rotate();\n"
     "     rotate();\n"
     "   }\n"
     " }\n"
     " void access()\n"
     " {\n"
     "   lct_node_t *uu = this, *ss = nullptr;\n"
     "   while (uu != nullptr)\n"
     "   {\n"
     "     uu->splay(); uu->s[1] = ss;\n"
     "     ss = uu; uu = uu->f;\n"
     "   }\n"
     " }\n"
     "};\n"
     "lct_node_t p[N];\n"
     "lct_node_t pp[N];\n"
     "ftreap_node_t *t[N];\n"
     "int fa[N], dep[N], ws[N];\n"
     "void lct_link(int u)\n"
     "{\n"
     " // see(\"LCT: link\", u);\n"
     " p[u].access();\n"
     " p[u].splay();\n"
     " p[u].f = &p[fa[u]];\n"
     "}\n"
     "void lct_cut(int u)\n"
     "{\n"
     " // see(\"LCT: cut\", u);\n"
     " p[fa[u]].access();\n"
     " p[u].splay();\n"
     " p[u].f = nullptr;\n"
     "}\n"
     "void lct_reset(int u, hash_ord_t val)\n"
     "{\n"
     " p[u].splay();\n"
     " p[u].val = val;\n"
     "}\n"
     "hash_ord_t get_hash(int u)\n"
     "{\n"
     " p[u].access();\n"
     " p[u].splay();\n"
     " hash_ord_t ws_hash = p[u].val;\n"
     " hash_ord_t ot_hash = t[u]->hash_sum;\n"
     " see(u, ws_hash, ot_hash);\n"
     " return hash_join(ws_hash, ot_hash);\n"
     "}\n"
     "int get_top(int u)\n"
     "{\n"
     " p[u].access();\n"
     " p[u].splay();\n"
     " lct_node_t *pos = &p[u];\n"
     " while (pos->s[0] != nullptr)\n"
     "   pos = pos->s[0];\n"
     " pos->splay();\n"
     " return static_cast<int>(pos - p);\n"
     "}\n"
     "size_t get_size(int u)\n"
     "{\n"
     " p[u].splay();\n"
     " return p[u].val.first + t[u]->hash_sum.first;\n"
     "}\n"
     "size_t get_smax_size(int u)\n"
     "{\n"
     " if (t[u]->size == 1)\n"
     "   return 0;\n"
     " return ftreap_first(t[u]).first;\n"
     "}\n"
     "void update_hash(int u, hash_ord_t u_ori, hash_ord_t u_cur)\n"
     "{\n"
     " see(u, u_ori, u_cur);\n"
     " if (u == 1) return;\n"
     " const int f = fa[u];\n"
     " const size_t u_size = get_size(u);\n"
     " const hash_ord_t f_ori = get_hash(f);\n"
     " if (ws[f] != 0)\n"
     " {\n"
     "   size_t fs_size = get_size(ws[f]);\n"
     "   if (fs_size <= u_size)\n"
     "   {\n"
     "     assert(fs_size == u_size);\n"
     "     ftreap_insert(t[f], get_hash(ws[f]));\n"
     "     lct_cut(ws[f]);\n"
     "     lct_reset(f, {0,0});\n"
     "     ws[f] = 0;\n"
     "   }\n"
     " }\n"
     " if (u_ori != (hash_ord_t){0,0})\n"
     " {\n"
     "   const size_t ori_cnt = ftreap_erase_once(t[f], u_ori);\n"
     "   // see(\"mod_div\", f, ori_cnt);\n"
     "   pp[f].access();\n"
     "   pp[f].splay();\n"
     "   pp[f].push_mul(inv[ori_cnt]);\n"
     " }\n"
     " if (ws[f] == 0 && get_smax_size(f) < u_size)\n"
     " {\n"
     "   lct_link(u);\n"
     "   lct_reset(f, u_cur);\n"
     "   // see(f, u_cur);\n"
     "   ws[f] = u;\n"
     " }\n"
     " else\n"
     " {\n"
     "   size_t cur_cnt = ftreap_insert(t[f], u_cur);\n"
     "   // see(\"mod_mul\", f, cur_cnt);\n"
     "   pp[f].access();\n"
     "   pp[f].splay();\n"
     "   pp[f].push_mul(cur_cnt);\n"
     " }\n"
     " const hash_ord_t f_cur = get_hash(f);\n"
     " int top = get_top(f);\n"
     " hash_ord_t top_ori, top_cur;\n"
     " if (top != f)\n"
     " {\n"
     "   top_ori = get_hash(top);\n"
     "   const hash_ord_t det = hash_det(f_ori, f_cur);\n"
     "   see(det);\n"
     "   int ff = fa[f];\n"
     "   p[ff].access();\n"
     "   p[ff].splay();\n"
     "   p[ff].push_join(det);\n"
     "   top_cur = get_hash(top);\n"
     " }\n"
     " else\n"
     " {\n"
     "   top_ori = f_ori;\n"
     "   top_cur = f_cur;\n"
     " }\n"
     " update_hash(top, top_ori, top_cur);\n"
     "}\n"
     "void preInit() \n"
     "{ \n"
     " hash_cpow[0] = 1;\n"
     " hash_cpow[1] = 82061943317773333ull;\n"
     " for (int i = 2; i < N; i++)\n"
     "   hash_cpow[i] = hash_cpow[i - 1] * hash_cpow[1];\n"
     " inv[1] = 1;\n"
     " for (int i = 2; i < N; i++)\n"
     "   inv[i] = inv[MOD % i] * (MOD - MOD / i);\n"
     "} \n"
     "int m;\n"
     "void init() \n"
     "{ \n"
     " m = sc.n(); \n"
     " dep[1] = 1;\n"
     " ftreap_insert(t[1], {1,1});\n"
     "}\n"
     "void solve() \n"
     "{\n"
     " int u = 2;\n"
     " for (int i = 0; i < m; i++)\n"
     " {\n"
     "   int opt = sc.n();\n"
     "   if (opt == 0)\n"
     "   {\n"
     "     int f = sc.n(); \n"
     "     see(\"add\", f, u);\n"
     "     fa[u] = f;\n"
     "     pp[u].f = &pp[f];\n"
     "     dep[u] = dep[f] + 1;\n"
     "     ftreap_insert(t[u], {1,dep[u]});\n"
     "     update_hash(u, {0,0}, {1,dep[u]});\n"
     "     u++;\n"
     "   }\n"
     "   else\n"
     "   {\n"
     "     int u = sc.n();\n"
     "     pp[u].splay();\n"
     "     std::cout << pp[u].ans << std::endl;\n"
     "   }\n"
     " }\n"
     "}\n")))
  ((h1
    (id
     .
     "-ur-1-%E8%B7%B3%E8%9A%A4%E5%9B%BD%E7%8E%8B%E4%B8%8B%E6%B1%9F%E5%8D%97-https-uoj-ac-problem-23"))
   ((a (href . "https://uoj.ac/problem/23")) "UR#1 跳蚤国王下江南"))
  (p "久闻其名的毒瘤题，不过写完以后久的其实还好？")
  ((h2 (id . "description")) "Description")
  (p "给一棵 $n$ 个点的仙人掌，对于 $1 \\leq l \\leq n-1$ 求从 1 开始长度为 $l$ 的路径数量。")
  ((h2 (id . "tutorial")) "Tutorial")
  (p "看到仙人掌第一反应建圆方树，但这题因为只用考虑上下的路径，所以其实不用方点，直接把圆点连向方点的父亲即可。")
  (p "求路径数不难想到点分治和 FFT，由于这是有根的问题所以点分治会略有不同。")
  (p
   "对于一个分治中心所在的连痛块，我们定义这个联通块的根为深度最浅的那个点，也就是到 1 距离最小的那个点。对于这个联通块我们要求出联通块中所有点到当前联通块根的信息。因此合并答案的方式为：")
  (p "当前联通块答案 = 点分中心上方答案 + 联通块根到点分中心的答案 $\\times$ 点分中心所有儿子的答案的和")
  (p "把一条权值为 $(a,b)$ 的边看成多项式 $x^a + x^b$，那么直接进行多项式乘法多项式加法即可。")
  (p
   "考虑如何求联通块根到点分中心的答案。直接暴力枚举每条边再分治乘法可以做到 $O(\\log^2n)$，但我们发现如果先对点分中心上方的联通块求答案，此时这段路径可以被分为 $O(\\log n)$ 段 “点分中心-联通块根” 的路径。这些路径的答案都已经求出，直接合并即可。时间复杂度 $T(n) = T(\\frac n2) + O(n \\log n), T(n) = O(n \\log n)$，算上点分的总时间复杂度为 $O(n \\log^2 n)$")
  (p
   "注意如果仙人掌上有很大的环，圆方树上的边权可能很大，在分治的时候要注意一些细节。合并儿子的时候如果直接乘上当前边的边权会被菊花卡掉，应该用位移再加的方式，保证代价不超过子树大小。")
  (p ((a (href . "https://uoj.ac/submission/504283")) "AC 记录"))
  ((h1
    (id
     .
     "-%E7%81%AB%E8%BD%A6%E5%8F%B8%E6%9C%BA%E5%87%BA%E7%A7%A6%E5%B7%9D-https-uoj-ac-problem-189"))
   ((a (href . "https://uoj.ac/problem/189")) "火车司机出秦川"))
  (p "跳蚤国王和共价大爷都写了，干脆把火车司机也写了")
  ((h2 (id . "description")) "Description")
  (p "给定一棵仙人掌，边有边权，保证每个环长度都是奇数。")
  (p
   "定义 $\\operatorname{path}(u,v,0)$ 表示 $u$ 到 $v$ 的最短简单路径，$\\operatorname{path}(u,v,1)$ 表示 $u$ 到 $v$ 的最长简单路径。")
  (p "进行一下两种操作：")
  (ul
   (li "修改某条边的边权")
   (li
    "给定 $k$ 条路径 $\\operatorname{path}(u,v,t)\\ (u,v \\in [1,n], t \\in {0,1})$，求这些路径并集覆盖的边的边权之和"))
  ((h2 (id . "tutorial")) "Tutorial")
  (p "先解决树上问题，$k$ 条路径查询不难想到虚树，单点修改链查询可以用树状数组维护括号序。")
  (p
   "扩展到仙人掌上需要建圆方树。此时一条有车经过的路径有三种类型：只走短路径、只走长路径、长短路径都走。所以也要维护三个树状数组进行链查询。此时边权的修改体现为一个方点的若干相邻儿子修改，在括号序列上仍然是相邻的一段，可以直接修改。")
  (p "然后考虑查询部分。对于路径一端是方点的情况，不能直接把对应边的答案加到总答案里，应该对于每个方点记录环上哪些区间被覆盖，最后统计到答案里。")
  (p ((a (href . "https://uoj.ac/submission/504593")) "AC 记录"))
  (br))
