($article
  ((tag Tutorial LCT VTree Dp)
   (title . "Lougu P4242 树上的毒瘤")
   (date . "")
   (mathjax . #t))
  (p "真 毒瘤题。LCT/树剖 + 虚树 + 点分/换根dp，码量有点小大")
  (p
   "前置题目："
   ((a (href . "https://www.luogu.com.cn/problem/P2486")) "SDOI2011染色")
   "，"
   ((a (href . "https://www.luogu.com.cn/problem/P2495")) "SDOI2011消耗战(虚树板子)")
   (del "(这题怎么这么喜欢SDOI2011啊)"))
  (p "那道题是这个的简化版，只对两个点进行查询，而这题要对一堆点查询。")
  (p "多次查询对一堆点保证总点数大小的显然是虚树。")
  (p
   "考虑如何构建这个虚树并保留足够的信息。设虚树中每条边的边权为原树上两个端点之间颜色段数 $-1$，不难证明任意两点间的答案等于路径上边权和$+1$")
  (p "所以现在要求的就是虚树上每个点到其他点距离的和，经典题，换根dp或者点分就行了")
  (p "复杂度 $O(n \\log n)$ 或者 $O(n \\log^2 n)$，取决于用树剖还是LCT（其实LCT大常数应该差不多）")
  (p "我写的LCT和换根dp，目前最优解，其实还有很多优化空间（比如ST表LCA什么的）。")
  ((h2 (id . "code")) "code :")
  (pre
   ((code (class . "lang-cpp"))
    "#define rep(i,n) for (int i=0;i<n;i++)\n"
    "#define repa(i,n) for (int i=1;i<=n;i++)\n"
    "#define repb(i,a,b) for (int i=a;i>=n;i--)\n"
    "const int N = 100005;\n"
    "struct LCT {\n"
    "   struct Node {\n"
    "       Node *s[2], *f;\n"
    "       int c, lc, rc, tot;\n"
    "       int rev, tag;\n"
    "       Node() { s[0]=s[1]=f=NULL; c=lc=rc=tot=rev=0; }\n"
    "       bool isRoot() {\n"
    "           if (f==NULL) return 1;\n"
    "           return this!=f->s[0] && this!=f->s[1]; }\n"
    "       int getSon() {\n"
    "           return f->s[1] == this; }\n"
    "       void pushUp() {\n"
    "           if (s[0]==NULL && s[1]==NULL) { lc=rc=c; tot=1; }\n"
    "           else if (s[0]==NULL) { lc=c; rc=s[1]->rc; tot=s[1]->tot + (c!=s[1]->lc); }\n"
    "           else if (s[1]==NULL) { lc=s[0]->lc; rc=c; tot=s[0]->tot + (c!=s[0]->rc); }\n"
    "           else {\n"
    "               lc=s[0]->lc; rc=s[1]->rc;\n"
    "               tot = s[0]->tot + s[1]->tot + 1 - (s[0]->rc==c) - (c==s[1]->lc) ; } }\n"
    "       void pushRev() {\n"
    "           rev ^= 1; swap(s[0],s[1]); swap(lc,rc); }\n"
    "       void pushTag(int nc) {\n"
    "           tag=1; c=lc=rc=nc; tot=1; }\n"
    "       void pushDown() {\n"
    "           if (tag) { rep (i,2) if (s[i]!=NULL) { s[i]->pushTag(c); } }\n"
    "           if (rev) { rep (i,2) if (s[i]!=NULL) { s[i]->pushRev(); } }\n"
    "           tag = rev = 0; } \n"
    "       void push() {\n"
    "           if (!isRoot()) f->push();\n"
    "           pushDown(); }\n"
    "       void rotate() {\n"
    "           int ss = getSon();            \n"
    "           Node *uu=this, *ff=f, *aa=ff->f, *cc = s[!ss];\n"
    "           if (!ff->isRoot()) aa->s[ ff->getSon() ] = uu;\n"
    "           ff->s[ss] = cc; ff->f = uu;\n"
    "           uu->s[!ss] = ff; uu->f = aa;\n"
    "           if (cc!=NULL) cc->f = ff;\n"
    "           ff->pushUp(); uu->pushUp(); }\n"
    "       void _splay() {\n"
    "           if (isRoot()) return;\n"
    "           if (f->isRoot()) { rotate(); return; }\n"
    "           ( getSon() == f->getSon() ? f : this ) -> rotate(); rotate();\n"
    "           _splay(); }\n"
    "       void splay() {\n"
    "           push(); _splay(); }\n"
    "       void access() {\n"
    "           Node *uu=this, *ss=NULL;\n"
    "           while (uu!=NULL) {\n"
    "               uu->splay(); uu->s[1]=ss; uu->pushUp(); \n"
    "               ss=uu; uu=uu->f; } }\n"
    "       void makeRoot() {\n"
    "           access(); splay(); pushRev(); }\n"
    "   };\n"
    "   Node p[N];\n"
    "   void link(int u, int v) {\n"
    "       p[u].makeRoot(); p[u].f=&p[v]; }\n"
    "   void split(int u, int v) {\n"
    "       p[u].makeRoot(); p[v].access(); p[v].splay(); }\n"
    "   void update(int u, int v, int c) {\n"
    "       split(u,v); p[v].pushTag(c); }\n"
    "   int query(int u, int v) {\n"
    "       split(u,v); return p[v].tot; }\n"
    "};\n"
    "struct Tree {\n"
    "   int ef[N], en[N*2], ev[N*2], ec;\n"
    "   Tree () { memset(ef,-1,sizeof(ef)); memset(en,-1,sizeof(en)); ec = 0; }\n"
    "   void addEdge (int u, int v) {\n"
    "       en[ec] = ef[u]; ef[u] = ec; ev[ec] = v; ec++;\n"
    "       en[ec] = ef[v]; ef[v] = ec; ev[ec] = u; ec++; }\n"
    "   void clear(int u) { ef[u] = -1; }\n"
    "   void clearAll() { ec = 0; }\n"
    "};\n"
    "struct Tree1 : public Tree {\n"
    "   int ew[N*2];\n"
    "   void addEdge (int u, int v, int w) { w--;\n"
    "       en[ec] = ef[u]; ef[u] = ec; ev[ec] = v; ew[ec] = w; ec++;\n"
    "       en[ec] = ef[v]; ef[v] = ec; ev[ec] = u; ew[ec] = w; ec++; }\n"
    "   int sz[N]; long long sum[N], ans[N];\n"
    "   void clear(int u) { this->Tree::clear(u); sz[u] = 0; }\n"
    "   void dfs0 (int u, int f) {\n"
    "       sum[u] = 0; \n"
    "       for (int e=ef[u]; e!=-1; e=en[e]) if (ev[e] != f) {\n"
    "           dfs0(ev[e], u); \n"
    "           sz[u] += sz[ev[e]]; sum[u] += 1LL*sz[ev[e]]*ew[e] + sum[ev[e]]; } }\n"
    "   void dfs1 (int u, int f, long long ups) {\n"
    "       ans[u] = ups + sum[u];\n"
    "       for (int e=ef[u]; e!=-1; e=en[e]) if (ev[e] != f) {\n"
    "           dfs1(ev[e], u, ups + 1LL*ew[e]*(sz[1]-sz[ev[e]]) + sum[u]-sum[ev[e]]-1LL*ew[e]*sz[ev[e]]); } }\n"
    "} T1;\n"
    "struct Tree0 : public Tree {\n"
    "   static const int B = 20;\n"
    "   LCT T; \n"
    "   int d[N], fa[N][B], dfn[N], dfnCnt;\n"
    "   void addEdge(int u, int v) {\n"
    "       this->Tree::addEdge(u,v); T.link(u,v); }\n"
    "   void dfs(int u, int f) {\n"
    "       dfn[u] = dfnCnt++; d[u] = d[f]+1;\n"
    "       fa[u][0] = f; rep (i,B-1) { fa[u][i+1] = fa[ fa[u][i] ][i]; }\n"
    "       for (int e=ef[u]; e!=-1; e=en[e]) if (ev[e] != f) {\n"
    "           dfs(ev[e], u); } } \n"
    "   void init(int _n) {\n"
    "       repa (i,_n) { int w; scanf(I,&w); T.update(i,i,w); }  }\n"
    "   void pre() {\n"
    "       dfnCnt=0; dfs(1,0);  }\n"
    "   void up(int &u, int d) {\n"
    "       repb (i,B-1,0) { if ((d>>i) & 1) { u = fa[u][i]; } } }\n"
    "   int lca(int u, int v) {\n"
    "       if (d[u] < d[v]) { swap(u,v); } up(u, d[u]-d[v]); \n"
    "       repb (i,B-1,0) { if (fa[u][i] != fa[v][i]) { u = fa[u][i]; v = fa[v][i]; }  }\n"
    "       return u==v ? u : fa[u][0]; }\n"
    "   int st[N], stTop;\n"
    "   void VT (int u[], int n, Tree1 &Tg) {\n"
    "       sort(u, u+n, [this](int a, int b) { return dfn[a]<dfn[b]; });\n"
    "       stTop=0; if (u[0]!=1) { st[stTop++] = 1; } Tg.clearAll(); Tg.clear(1);\n"
    "       rep (i,n) {\n"
    "           while (stTop > 1) {\n"
    "               int f=st[stTop-1], ff=st[stTop-2], l=lca(u[i],f); \n"
    "               if (l == f) { break; }\n"
    "               else if (dfn[l] <= dfn[ff]) { Tg.addEdge(ff,f,T.query(ff,f)); stTop--; }\n"
    "               else { Tg.clear(l); Tg.addEdge(l,f,T.query(l,f)); stTop--; st[stTop++] = l; break; } }\n"
    "           Tg.clear(u[i]); st[stTop++] = u[i]; }\n"
    "       while (stTop > 1) { int f = st[stTop-1], ff = st[stTop-2]; Tg.addEdge(f,ff,T.query(f,ff)); stTop--; } \n"
    "       rep (i,n) Tg.sz[u[i]] = 1; }\n"
    "} T0;\n"))
  (br))
